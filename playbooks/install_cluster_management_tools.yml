---
- name: Install Cluster Management and Visualization Tools
  hosts: all
  become: true
  vars_files:
    - ../group_vars/all.yml

  vars:
    management_namespace: "cluster-management"

  tasks:
    - name: Create cluster management namespace
      kubernetes.core.k8s:
        name: "{{ management_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "/home/{{ ansible_user }}/.kube/config"
      become_user: "{{ ansible_user }}"
      run_once: true

    - name: Add Skooner (k8dash) Helm repository
      kubernetes.core.helm_repository:
        name: skooner
        repo_url: https://skooner-k8s.github.io/skooner
      become_user: "{{ ansible_user }}"
      run_once: true

    - name: Update Helm repositories
      kubernetes.core.helm:
        name: dummy
        chart_ref: skooner/skooner
        state: absent
        update_repo_cache: true
      become_user: "{{ ansible_user }}"
      run_once: true
      failed_when: false

    - name: Create Skooner values file
      copy:
        content: |
          # Skooner (k8dash) configuration for homelab
          
          # Service configuration
          service:
            type: ClusterIP
            port: 80
            
          # Resource limits for homelab
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
              
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            
          # Node selector for control plane nodes (optional)
          nodeSelector:
            kubernetes.io/os: linux
            
          # Enable service account with cluster admin (required for dashboard)
          serviceAccount:
            create: true
            name: skooner-service-account
            
          # RBAC configuration
          rbac:
            create: true
            clusterRoleBinding:
              create: true
        dest: "/tmp/skooner-values.yaml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Install Skooner cluster dashboard
      kubernetes.core.helm:
        name: skooner
        chart_ref: skooner/skooner
        release_namespace: "{{ management_namespace }}"
        create_namespace: true
        values_files:
          - "/tmp/skooner-values.yaml"
        wait: true
        wait_timeout: 300s
      become_user: "{{ ansible_user }}"
      run_once: true

    - name: Create Kubevious deployment
      copy:
        content: |
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: kubevious-backend
            namespace: {{ management_namespace }}
            labels:
              app: kubevious-backend
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: kubevious-backend
            template:
              metadata:
                labels:
                  app: kubevious-backend
              spec:
                serviceAccountName: kubevious-service-account
                containers:
                - name: kubevious-backend
                  image: kubevious/backend:1.0.22
                  ports:
                  - containerPort: 4000
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: LOG_LEVEL
                    value: "info"
                  - name: SERVER_PORT
                    value: "4000"
                  resources:
                    requests:
                      cpu: 100m
                      memory: 200Mi
                    limits:
                      cpu: 500m
                      memory: 500Mi
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 4000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 4000
                    initialDelaySeconds: 15
                    periodSeconds: 5
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: kubevious-frontend
            namespace: {{ management_namespace }}
            labels:
              app: kubevious-frontend
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: kubevious-frontend
            template:
              metadata:
                labels:
                  app: kubevious-frontend
              spec:
                containers:
                - name: kubevious-frontend
                  image: kubevious/ui:1.0.22
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: REACT_APP_BACKEND_BASE_URL
                    value: "http://kubevious-backend-service:4000"
                  resources:
                    requests:
                      cpu: 50m
                      memory: 100Mi
                    limits:
                      cpu: 200m
                      memory: 200Mi
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 3000
                    initialDelaySeconds: 15
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: kubevious-backend-service
            namespace: {{ management_namespace }}
          spec:
            selector:
              app: kubevious-backend
            ports:
            - port: 4000
              targetPort: 4000
              protocol: TCP
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: kubevious-frontend-service
            namespace: {{ management_namespace }}
          spec:
            selector:
              app: kubevious-frontend
            ports:
            - port: 3000
              targetPort: 3000
              protocol: TCP
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: kubevious-service-account
            namespace: {{ management_namespace }}
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: kubevious-cluster-role
          rules:
          - apiGroups: [""]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["apps"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["extensions"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["networking.k8s.io"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["policy"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["rbac.authorization.k8s.io"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["storage.k8s.io"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["apiextensions.k8s.io"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["metrics.k8s.io"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: kubevious-cluster-role-binding
          subjects:
          - kind: ServiceAccount
            name: kubevious-service-account
            namespace: {{ management_namespace }}
          roleRef:
            kind: ClusterRole
            name: kubevious-cluster-role
            apiGroup: rbac.authorization.k8s.io
        dest: "/home/{{ ansible_user }}/kubevious-deployment.yaml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Deploy Kubevious cluster visualization
      kubernetes.core.k8s:
        state: present
        src: "/home/{{ ansible_user }}/kubevious-deployment.yaml"
        kubeconfig: "/home/{{ ansible_user }}/.kube/config"
      become_user: "{{ ansible_user }}"
      run_once: true

    - name: Create K9s installation script
      copy:
        content: |
          #!/bin/bash
          
          # K9s Terminal Dashboard Installation
          
          set -e
          
          echo "üöÄ Installing K9s - Kubernetes CLI Dashboard"
          echo "============================================"
          echo ""
          
          # Detect architecture
          ARCH=$(uname -m)
          case $ARCH in
              x86_64)
                  ARCH="amd64"
                  ;;
              aarch64|arm64)
                  ARCH="arm64"
                  ;;
              *)
                  echo "‚ùå Unsupported architecture: $ARCH"
                  exit 1
                  ;;
          esac
          
          echo "üîç Detected architecture: $ARCH"
          
          # Get latest K9s release
          echo "üîç Fetching latest K9s release information..."
          LATEST_VERSION=$(curl -s https://api.github.com/repos/derailed/k9s/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          if [ -z "$LATEST_VERSION" ]; then
              echo "‚ùå Failed to fetch latest version"
              exit 1
          fi
          
          echo "üì¶ Latest version: $LATEST_VERSION"
          
          # Download and install K9s
          DOWNLOAD_URL="https://github.com/derailed/k9s/releases/download/${LATEST_VERSION}/k9s_Linux_${ARCH}.tar.gz"
          
          echo "‚¨áÔ∏è  Downloading K9s..."
          wget -q -O k9s.tar.gz "$DOWNLOAD_URL"
          
          echo "üì¶ Extracting K9s..."
          tar -xzf k9s.tar.gz
          
          echo "üìã Installing K9s..."
          sudo mv k9s /usr/local/bin/
          sudo chmod +x /usr/local/bin/k9s
          
          # Cleanup
          rm -f k9s.tar.gz LICENSE README.md
          
          echo "‚úÖ K9s installed successfully!"
          echo ""
          echo "üéÆ Usage:"
          echo "  k9s                    # Start K9s dashboard"
          echo "  k9s --context myctx    # Use specific context"
          echo "  k9s --namespace mynamespace  # Start in specific namespace"
          echo ""
          echo "‚å®Ô∏è  Key bindings:"
          echo "  :pods                  # Switch to pods view"
          echo "  :services              # Switch to services view"
          echo "  :nodes                 # Switch to nodes view"
          echo "  :deployments           # Switch to deployments view"
          echo "  q                      # Quit/Go back"
          echo "  ?                      # Help"
          echo ""
          echo "üöÄ Start K9s now: k9s"
          
          # Verify installation
          k9s version
        dest: "/home/{{ ansible_user }}/install-k9s.sh"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create Lens installation script (optional desktop client)
      copy:
        content: |
          #!/bin/bash
          
          # Lens Desktop Kubernetes IDE Installation Instructions
          
          echo "üîç Lens Desktop - Kubernetes IDE"
          echo "================================="
          echo ""
          echo "Lens is a powerful desktop application for managing Kubernetes clusters."
          echo "Since this is a server environment, here are the installation options:"
          echo ""
          echo "üì± For Desktop/Laptop (with GUI):"
          echo "  1. Download from: https://k8slens.dev/"
          echo "  2. Install the appropriate package for your OS"
          echo "  3. Add your cluster by copying ~/.kube/config from this server"
          echo ""
          echo "üåê Alternative: OpenLens (Open Source)"
          echo "  1. Download from: https://github.com/MuhammedKalkan/OpenLens"
          echo "  2. Same functionality as Lens but fully open source"
          echo ""
          echo "üîß Connection Instructions:"
          echo "  1. Copy kubeconfig from server:"
          echo "     scp {{ ansible_user }}@$(hostname -I | awk '{print $1}'):~/.kube/config ~/.kube/config-homelab"
          echo ""
          echo "  2. In Lens, go to File > Add Cluster > Select kubeconfig file"
          echo "  3. Browse to the copied config file"
          echo ""
          echo "üìä Features you'll get:"
          echo "  ‚Ä¢ Visual cluster overview"
          echo "  ‚Ä¢ Real-time resource monitoring"
          echo "  ‚Ä¢ Pod logs and terminal access"
          echo "  ‚Ä¢ YAML editing with validation"
          echo "  ‚Ä¢ Multi-cluster management"
          echo ""
          echo "üí° For command-line management, use K9s instead:"
          echo "  ./install-k9s.sh"
        dest: "/home/{{ ansible_user }}/lens-installation-guide.sh"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create cluster management tools script
      copy:
        content: |
          #!/bin/bash
          
          # Cluster Management Tools Access Script
          
          set -e
          
          echo "üéõÔ∏è  Kubernetes Cluster Management Tools"
          echo "======================================"
          echo ""
          
          # Function to check if a service is running
          check_service() {
              local service_name=$1
              local namespace=$2
              local port=$3
              
              if kubectl get service "$service_name" -n "$namespace" >/dev/null 2>&1; then
                  echo "‚úÖ $service_name is running in namespace $namespace"
                  return 0
              else
                  echo "‚ùå $service_name is not running"
                  return 1
              fi
          }
          
          # Function to start port forwarding
          start_port_forward() {
              local service=$1
              local namespace=$2
              local local_port=$3
              local remote_port=$4
              local description=$5
              
              echo "üîó Starting port forward for $description..."
              echo "   kubectl port-forward -n $namespace svc/$service $local_port:$remote_port"
              echo "   Access at: http://localhost:$local_port"
              echo ""
              
              kubectl port-forward -n "$namespace" "svc/$service" "$local_port:$remote_port" &
              local PID=$!
              echo "   Port forward PID: $PID"
              echo "   To stop: kill $PID"
              echo ""
          }
          
          echo "üîç Checking cluster management tools status..."
          echo ""
          
          # Check Skooner
          if check_service "skooner" "{{ management_namespace }}" "80"; then
              SKOONER_AVAILABLE=true
          else
              SKOONER_AVAILABLE=false
          fi
          
          # Check Kubevious
          if check_service "kubevious-frontend-service" "{{ management_namespace }}" "3000"; then
              KUBEVIOUS_AVAILABLE=true
          else
              KUBEVIOUS_AVAILABLE=false
          fi
          
          # Check if K9s is installed
          if command -v k9s >/dev/null 2>&1; then
              K9S_AVAILABLE=true
              echo "‚úÖ K9s is installed"
          else
              K9S_AVAILABLE=false
              echo "‚ùå K9s is not installed"
          fi
          
          echo ""
          echo "üìã Available Management Tools:"
          echo ""
          
          if [ "$SKOONER_AVAILABLE" = true ]; then
              echo "1. üéõÔ∏è  Skooner (Web Dashboard)"
              echo "   Modern Kubernetes dashboard with real-time updates"
          fi
          
          if [ "$KUBEVIOUS_AVAILABLE" = true ]; then
              echo "2. üîç Kubevious (Cluster Visualization)"
              echo "   Advanced cluster topology and dependency visualization"
          fi
          
          if [ "$K9S_AVAILABLE" = true ]; then
              echo "3. üíª K9s (Terminal Dashboard)" 
              echo "   Interactive terminal-based cluster management"
          fi
          
          echo "4. üìä Native kubectl"
          echo "   Standard Kubernetes command-line interface"
          
          echo "5. üì± Lens Desktop (External)"
          echo "   Desktop application for cluster management"
          
          echo ""
          echo "Select a tool to launch:"
          echo ""
          
          # Create menu based on available tools
          MENU_OPTIONS=()
          
          if [ "$SKOONER_AVAILABLE" = true ]; then
              MENU_OPTIONS+=("skooner")
              echo "s) Skooner Dashboard"
          fi
          
          if [ "$KUBEVIOUS_AVAILABLE" = true ]; then
              MENU_OPTIONS+=("kubevious")
              echo "k) Kubevious Visualization"
          fi
          
          if [ "$K9S_AVAILABLE" = true ]; then
              MENU_OPTIONS+=("k9s")
              echo "9) K9s Terminal Dashboard"
          fi
          
          MENU_OPTIONS+=("kubectl" "lens-guide")
          echo "c) kubectl Commands Reference"
          echo "l) Lens Desktop Installation Guide"
          echo "q) Quit"
          echo ""
          
          read -p "Enter your choice: " -r CHOICE
          echo ""
          
          case $CHOICE in
              s|S)
                  if [ "$SKOONER_AVAILABLE" = true ]; then
                      start_port_forward "skooner" "{{ management_namespace }}" "8080" "80" "Skooner Dashboard"
                      echo "üéâ Skooner is now available at http://localhost:8080"
                      echo "   Press Ctrl+C to stop port forwarding"
                      wait
                  else
                      echo "‚ùå Skooner is not available"
                  fi
                  ;;
              k|K)
                  if [ "$KUBEVIOUS_AVAILABLE" = true ]; then
                      start_port_forward "kubevious-frontend-service" "{{ management_namespace }}" "8081" "3000" "Kubevious Visualization"
                      echo "üéâ Kubevious is now available at http://localhost:8081"
                      echo "   Press Ctrl+C to stop port forwarding"
                      wait
                  else
                      echo "‚ùå Kubevious is not available"
                  fi
                  ;;
              9)
                  if [ "$K9S_AVAILABLE" = true ]; then
                      echo "üöÄ Starting K9s..."
                      k9s
                  else
                      echo "‚ùå K9s is not installed. Run: ./install-k9s.sh"
                  fi
                  ;;
              c|C)
                  echo "üìã Useful kubectl commands:"
                  echo ""
                  echo "üìä Cluster overview:"
                  echo "  kubectl cluster-info"
                  echo "  kubectl get nodes -o wide"
                  echo "  kubectl get pods -A"
                  echo "  kubectl get services -A"
                  echo ""
                  echo "üîç Resource inspection:"
                  echo "  kubectl describe node NODE_NAME"
                  echo "  kubectl describe pod POD_NAME -n NAMESPACE"
                  echo "  kubectl logs POD_NAME -n NAMESPACE"
                  echo "  kubectl top nodes"
                  echo "  kubectl top pods -A"
                  echo ""
                  echo "üéõÔ∏è  Dashboard access:"
                  echo "  kubectl port-forward -n {{ management_namespace }} svc/skooner 8080:80"
                  echo "  kubectl port-forward -n {{ management_namespace }} svc/kubevious-frontend-service 8081:3000"
                  echo ""
                  ;;
              l|L)
                  ./lens-installation-guide.sh
                  ;;
              q|Q)
                  echo "üëã Goodbye!"
                  exit 0
                  ;;
              *)
                  echo "‚ùå Invalid choice: $CHOICE"
                  exit 1
                  ;;
          esac
        dest: "/home/{{ ansible_user }}/cluster-management.sh"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Wait for cluster management tools to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ management_namespace }}"
        label_selectors:
          - app=skooner
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
      become_user: "{{ ansible_user }}"
      run_once: true

    - name: Display cluster management tools installation summary
      debug:
        msg:
          - "================================="
          - "üéõÔ∏è  CLUSTER MANAGEMENT READY!"
          - "================================="
          - ""
          - "‚úÖ Skooner web dashboard deployed"
          - "‚úÖ Kubevious cluster visualization deployed"
          - "‚úÖ K9s terminal dashboard installer created"
          - "‚úÖ Management tools access script created"
          - ""
          - "üöÄ Launch Management Tools:"
          - "  ~/cluster-management.sh    # Interactive tool launcher"
          - ""
          - "üéõÔ∏è  Individual Tool Access:"
          - "  Skooner Dashboard:"
          - "    kubectl port-forward -n {{ management_namespace }} svc/skooner 8080:80"
          - "    Visit: http://localhost:8080"
          - ""
          - "  Kubevious Visualization:"
          - "    kubectl port-forward -n {{ management_namespace }} svc/kubevious-frontend-service 8081:3000"  
          - "    Visit: http://localhost:8081"
          - ""
          - "  K9s Terminal Dashboard:"
          - "    ~/install-k9s.sh          # First install K9s"
          - "    k9s                       # Then launch"
          - ""
          - "üì± Desktop Client:"
          - "  ~/lens-installation-guide.sh  # Lens/OpenLens setup guide"
          - ""
          - "üîß Tool Features:"
          - "  ‚Ä¢ Skooner: Modern web dashboard with real-time updates"
          - "  ‚Ä¢ Kubevious: Advanced topology and dependency visualization"
          - "  ‚Ä¢ K9s: Interactive terminal-based cluster management"
          - "  ‚Ä¢ Lens: Powerful desktop IDE for Kubernetes"
          - ""
          - "üìä All tools provide:"
          - "  ‚Ä¢ Resource monitoring and management"
          - "  ‚Ä¢ Log viewing and debugging"
          - "  ‚Ä¢ YAML editing and validation"
          - "  ‚Ä¢ Multi-namespace navigation"
      run_once: true

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/skooner-values.yaml"